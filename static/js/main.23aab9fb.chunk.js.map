{"version":3,"sources":["with-auth.jsx","use-field.js","App.jsx","index.js","App.module.css"],"names":["WrappedComponent","initialValue","useState","value","setValue","useCallback","_","nextValue","FORMATS_MAP","DICTIONARIES_MAP","withAuth","database","setDatabase","Set","map","selectedFormatsSet","setSelectedFormatsSet","useField","selectedDictionary","handleSelectedDictionaryChange","setSelectedDictionary","wordGroups","handleWordGroupsChange","useDebounce","wordGroupsDebounced","wordGroupsClean","useMemo","split","flatMap","wordGroup","trim","replaceAll","word","test","toLowerCase","formats","dictionarySet","reduce","result","format","has","forEach","wordGroup1","i","wordGroup2","j","word1","word2","anagrams","includes","length","sort","join","isAnagram","push","metagrams","hasDifference","charAt","isMetagram","metanagrams","replace","isMetanagram","plusograms","word1Sorted","word2Sorted","isPlusogram","tlenograms","isTlenogram","logogrifs","isLogogrif","logogrifs2","totalDifferences","isLogogrif2","metagrifs","isMetagrif","brukvas","isBrukva","tikvas","isTikva","hybrids3","hybrid3","intersection","slice","toUpperCase","createHybrid3","hybrids4","hybrid4","createHybrid4","sharadas","sharada","createSharada","golovahvosts","word1Tail","createGolovahvosts","golovahvost","getFormats","set","handleSelectedFormatChange","filter","useEffect","a","async","sanstv","sociation","array","useHotkeys","find","className","styles","header","Container","Grid","padded","Row","Column","width","Form","TextArea","autoFocus","placeholder","onChange","Modal","size","trigger","Button","icon","Header","content","Content","Group","grouped","formatLabel","Checkbox","key","label","checked","dictionary","dictionaryLabel","Radio","Divider","horizontal","as","title","words","Label","classNames","odd","Loader","active","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.23aab9fb.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'rwJ4AZ';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback((_, { value: nextValue }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Grid,\n  Header,\n  Label,\n  Loader,\n  Modal,\n  TextArea,\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst FORMATS_MAP = [\n  ['anagrams', 'Анаграммы'],\n  ['brukvas', 'Брюквы'],\n  ['hybrids3', 'Гибриды (3)'],\n  ['hybrids4', 'Гибриды (4)'],\n  ['golovahvosts', 'Головахвосты'],\n  ['logogrifs', 'Логогрифы'],\n  ['logogrifs2', 'Логогрифы +2'],\n  ['metagrams', 'Метаграммы'],\n  ['metagrifs', 'Метагрифы'],\n  ['metanagrams', 'Метанаграммы'],\n  ['plusograms', 'Плюсограммы'],\n  ['tlenograms', 'Тленограммы'],\n  ['tikvas', 'Тыквы'],\n  ['sharadas', 'Шарады'],\n];\n\nconst DICTIONARIES_MAP = [\n  ['sanstv', 'sanstv.ru'],\n  ['sociation', 'sociation.org'],\n];\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n};\n\nconst isPlusogram = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length === 1 || word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length === 1 || word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n};\n\nconst isTlenogram = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 2;\n};\n\nconst isLogogrif = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isMetagrif = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      totalDifferences++;\n\n      if (totalDifferences > 2) {\n        break;\n      }\n    }\n  }\n\n  if (totalDifferences === 2) {\n    return true;\n  }\n\n  totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +(totalDifferences === 2)) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isBrukva = (word1, word2) => {\n  if (word1.length === 1 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isTikva = (word1, word2) => {\n  if (word1.length <= 2 || word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1 || totalDifferences === 2) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 3) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 3;\n};\n\nconst createHybrid3 = (word1, word2) => {\n  if (word1.length <= 3 || word2.length <= 3) {\n    return null;\n  }\n\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n};\n\nconst createHybrid4 = (word1, word2) => {\n  if (word1.length <= 4 || word2.length <= 4) {\n    return null;\n  }\n\n  const intersection = word1.slice(-4);\n  if (word2.slice(0, 4) === intersection) {\n    return word1.slice(0, -4) + intersection.toUpperCase() + word2.slice(4);\n  }\n\n  return null;\n};\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n};\n\nconst createGolovahvosts = (word1, word2, dictionarySet) => {\n  if (word1.length <= 3 || word2.length <= 3) {\n    return [];\n  }\n\n  const golovahvosts = [];\n  for (let i = word1.length - 1; i >= 3; i--) {\n    const word1Tail = word1.slice(-i);\n\n    for (let j = word2.length - 1; j >= 3; j--) {\n      const word = word1Tail + word2.slice(0, j);\n      if (dictionarySet.has(word)) {\n        golovahvosts.push(\n          word1.slice(0, word1.length - i) + word.toUpperCase() + word2.slice(j - word2.length),\n        );\n      }\n    }\n  }\n\n  return golovahvosts;\n};\n\nconst getFormats = (wordGroups, dictionarySet, selectedFormatsSet) => {\n  const formats = FORMATS_MAP.reduce((result, [format]) => {\n    if (selectedFormatsSet.has(format)) {\n      return {\n        ...result,\n        [format]: [],\n      };\n    }\n\n    return result;\n  }, {});\n\n  wordGroups.forEach((wordGroup1, i) => {\n    wordGroups.forEach((wordGroup2, j) => {\n      if (j === i) {\n        return;\n      }\n\n      wordGroup1.forEach((word1) => {\n        wordGroup2.forEach((word2) => {\n          if (word2 === word1) {\n            return;\n          }\n\n          const result = `${word1} ${word2}`;\n\n          if (j > i) {\n            if (\n              formats.anagrams &&\n              !formats.anagrams.includes(result) &&\n              isAnagram(word1, word2)\n            ) {\n              formats.anagrams.push(result);\n            }\n\n            if (\n              formats.metagrams &&\n              !formats.metagrams.includes(result) &&\n              isMetagram(word1, word2)\n            ) {\n              formats.metagrams.push(result);\n            }\n\n            if (\n              formats.metanagrams &&\n              !formats.metanagrams.includes(result) &&\n              isMetanagram(word1, word2)\n            ) {\n              formats.metanagrams.push(result);\n            }\n          }\n\n          if (\n            formats.plusograms &&\n            !formats.plusograms.includes(result) &&\n            isPlusogram(word1, word2)\n          ) {\n            formats.plusograms.push(result);\n          }\n\n          if (\n            formats.tlenograms &&\n            !formats.tlenograms.includes(result) &&\n            isTlenogram(word1, word2)\n          ) {\n            formats.tlenograms.push(result);\n          }\n\n          if (\n            formats.logogrifs &&\n            !formats.logogrifs.includes(result) &&\n            isLogogrif(word1, word2)\n          ) {\n            formats.logogrifs.push(result);\n          }\n\n          if (\n            formats.logogrifs2 &&\n            !formats.logogrifs2.includes(result) &&\n            isLogogrif2(word1, word2)\n          ) {\n            formats.logogrifs2.push(result);\n          }\n\n          if (\n            formats.metagrifs &&\n            !formats.metagrifs.includes(result) &&\n            isMetagrif(word1, word2)\n          ) {\n            formats.metagrifs.push(result);\n          }\n\n          if (formats.brukvas && !formats.brukvas.includes(result) && isBrukva(word1, word2)) {\n            formats.brukvas.push(result);\n          }\n\n          if (formats.tikvas && !formats.tikvas.includes(result) && isTikva(word1, word2)) {\n            formats.tikvas.push(result);\n          }\n\n          if (formats.hybrids3) {\n            const hybrid3 = createHybrid3(word1, word2);\n            if (hybrid3 && !formats.hybrids3.includes(hybrid3)) {\n              formats.hybrids3.push(hybrid3);\n            }\n          }\n\n          if (formats.hybrids4) {\n            const hybrid4 = createHybrid4(word1, word2);\n            if (hybrid4 && !formats.hybrids4.includes(hybrid4)) {\n              formats.hybrids4.push(hybrid4);\n            }\n          }\n\n          if (formats.sharadas) {\n            const sharada = createSharada(word1, word2, dictionarySet);\n            if (sharada && !formats.sharadas.includes(sharada)) {\n              formats.sharadas.push(sharada);\n            }\n          }\n\n          if (formats.golovahvosts) {\n            const golovahvosts = createGolovahvosts(word1, word2, dictionarySet);\n            golovahvosts.forEach((golovahvost) => {\n              if (!formats.golovahvosts.includes(golovahvost)) {\n                formats.golovahvosts.push(golovahvost);\n              }\n            });\n          }\n        });\n      });\n    });\n  });\n\n  return formats;\n};\n\nconst App = () => {\n  const [database, setDatabase] = useState(null);\n\n  const [selectedFormatsSet, setSelectedFormatsSet] = useState(\n    new Set(FORMATS_MAP.map(([format]) => format)),\n  );\n\n  const [selectedDictionary, handleSelectedDictionaryChange, setSelectedDictionary] = useField(\n    'sanstv',\n  );\n\n  const [wordGroups, handleWordGroupsChange] = useField('');\n  const [wordGroupsDebounced] = useDebounce(wordGroups, 500);\n\n  const wordGroupsClean = useMemo(\n    () =>\n      wordGroupsDebounced.split(/\\t+|\\n+/).flatMap((wordGroup) => {\n        wordGroup = wordGroup.trim();\n\n        if (!wordGroup) {\n          return [];\n        }\n\n        const words = wordGroup.replaceAll('/', ' ').replaceAll('\\\\', ' ').split(/\\s+/);\n\n        return [\n          words.flatMap((word) => {\n            if (!/^\\p{L}+$/u.test(word)) {\n              return [];\n            }\n\n            return [word.toLowerCase().replaceAll('ё', 'е')];\n          }),\n        ];\n      }),\n    [wordGroupsDebounced],\n  );\n\n  const formats = useMemo(() => {\n    if (!database) {\n      return {};\n    }\n\n    return getFormats(wordGroupsClean, database[selectedDictionary].set, selectedFormatsSet);\n  }, [database, selectedFormatsSet, selectedDictionary, wordGroupsClean]);\n\n  const handleSelectedFormatChange = useCallback(\n    (_, { value }) => {\n      if (selectedFormatsSet.has(value)) {\n        setSelectedFormatsSet(\n          new Set([...selectedFormatsSet].filter((format) => format !== value)),\n        );\n      } else {\n        setSelectedFormatsSet(new Set([...selectedFormatsSet, value]));\n      }\n    },\n    [selectedFormatsSet],\n  );\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./database.json');\n\n      setDatabase({\n        sanstv: {\n          array: sanstv,\n          set: new Set(sanstv),\n        },\n        sociation: {\n          array: sociation,\n          set: new Set(sociation),\n        },\n      });\n    })();\n  }, []);\n\n  useHotkeys(\n    'alt+space',\n    () => {\n      setSelectedDictionary(\n        DICTIONARIES_MAP.find(([dictionary]) => dictionary !== selectedDictionary)[0],\n      );\n    },\n    [selectedDictionary],\n  );\n\n  if (!database) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded>\n            <Grid.Row>\n              <Grid.Column width={15}>\n                <Form>\n                  <TextArea\n                    autoFocus\n                    value={wordGroups}\n                    placeholder=\"Группы слов\"\n                    onChange={handleWordGroupsChange}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column>\n                <Modal size=\"mini\" trigger={<Button size=\"big\" icon=\"setting\" />}>\n                  <Header icon=\"setting\" content=\"Настройки\" />\n                  <Modal.Content>\n                    <Form>\n                      <Form.Group grouped>\n                        <label>Форматы</label>\n                        {FORMATS_MAP.map(([format, formatLabel]) => (\n                          <Form.Checkbox\n                            key={format}\n                            value={format}\n                            label={formatLabel}\n                            checked={selectedFormatsSet.has(format)}\n                            onChange={handleSelectedFormatChange}\n                          />\n                        ))}\n                      </Form.Group>\n                      <Form.Group grouped>\n                        <label>Словарь</label>\n                        {DICTIONARIES_MAP.map(([dictionary, dictionaryLabel]) => (\n                          <Form.Radio\n                            key={dictionary}\n                            value={dictionary}\n                            label={dictionaryLabel}\n                            checked={dictionary === selectedDictionary}\n                            onChange={handleSelectedDictionaryChange}\n                          />\n                        ))}\n                      </Form.Group>\n                    </Form>\n                  </Modal.Content>\n                </Modal>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            {FORMATS_MAP.filter(([format]) => formats[format] && formats[format].length > 0).map(\n              ([format, formatLabel]) => (\n                <Grid.Row key={format}>\n                  <Grid.Column>\n                    <Divider horizontal>\n                      <Header as=\"h4\" className={styles.title}>\n                        {formatLabel}\n                      </Header>\n                    </Divider>\n                    <div className={styles.words}>\n                      {formats[format].map((word, i) => (\n                        <Label\n                          horizontal\n                          key={word}\n                          className={classNames(styles.word, i % 2 && styles.odd)}\n                        >\n                          {word}\n                        </Label>\n                      ))}\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              ),\n            )}\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}