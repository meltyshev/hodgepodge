{"version":3,"sources":["with-auth.jsx","App.jsx","use-field.js","index.js","App.module.css"],"names":["WrappedComponent","withAuth","useState","dictionary","setDictionary","initialValue","value","setValue","useCallback","nextValue","target","useField","data","handleDataChange","useDebounce","dataDebounced","useEffect","a","async","sanstv","sociation","Set","Loader","active","words","trim","toLowerCase","replace","split","filter","word","index","self","indexOf","anagrams","plusograms","metagrams","metanagrams","tlenograms","logogrifs","logogrifs2","metagrifs","brukvas","tikvas","hybrids3","hybrids4","sharadas","golovahvosts","forEach","word1","i","word2","j","length","sort","join","isAnagram","push","hasDifference","charAt","isMetagram","isMetanagram","isTlenogram","word1Sorted","word2Sorted","isPlusogram","isLogogrif","totalDifferences","isLogogrif2","isMetagrif","isBrukva","isTikva","hybrid3","intersection","slice","toUpperCase","createHybrid3","hybrid4","createHybrid4","sharada","has","createSharada","word1Tail","createGolovahvosts","Container","Grid","padded","Row","Column","Form","TextArea","autoFocus","placeholder","onChange","Divider","horizontal","Header","as","className","styles","title","map","anagram","Label","key","classNames","odd","plusogram","metagram","metanagram","tlenogram","logogrif","logogrif2","metagrif","brukva","tikva","golovahvost","useMemo","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9a8ae639.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'zhP4FC';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Container, Divider, Form, Grid, Header, Label, Loader, TextArea\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isTlenogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isTikva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1 || totalDifferences === 2) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 3) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 3;\n}\n\nconst createHybrid3 = (word1, word2) => {\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n}\n\nconst createHybrid4 = (word1, word2) => {\n  const intersection = word1.slice(-4);\n  if (word2.slice(0, 4) === intersection) {\n    return word1.slice(0, -4) + intersection.toUpperCase() + word2.slice(4);\n  }\n\n  return null;\n}\n\nconst createSharada = (word1, word2, dictionary) => {\n  const word = word1 + word2;\n  if (dictionary.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\nconst createGolovahvosts = (word1, word2, dictionary) => {\n  if (word1.length < 2 || word2.length < 2) {\n    return [];\n  }\n\n  const golovahvosts = [];\n  for (let i = 1; i < word1.length; i++) {\n    const word1Tail = word1.slice(i);\n\n    for (let j = 1; j < word2.length; j++) {\n      const word = word1Tail + word2.slice(0, -j);\n      if (word.length > 3 && dictionary.has(word)) {\n        golovahvosts.push(word1.slice(0, i) + word.toUpperCase() + word2.slice(-j));\n      }\n    }\n  }\n\n  return golovahvosts;\n};\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n  const [data, handleDataChange] = useField('');\n  const [dataDebounced] = useDebounce(data, 500);\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./dictionary.json');\n\n      setDictionary({\n        sanstv: new Set(sanstv),\n        sociation: new Set(sociation),\n      });\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  const words = dataDebounced\n    .trim()\n    .toLowerCase()\n    .replace('ё', 'е')\n    .split(/\\s+/)\n    .filter((word, index, self) => {\n      return index === self.indexOf(word);\n    });\n\n  const anagrams = [];\n  const plusograms = [];\n  const metagrams = [];\n  const metanagrams = [];\n  const tlenograms = [];\n  const logogrifs = [];\n  const logogrifs2 = [];\n  const metagrifs = [];\n  const brukvas = [];\n  const tikvas = [];\n  const hybrids3 = [];\n  const hybrids4 = [];\n  const sharadas = [];\n  const golovahvosts = [];\n\n  words.forEach((word1, i) => {\n    words.forEach((word2, j) => {\n      if (j === i) {\n        return;\n      }\n\n      if (j > i) {\n        if (isAnagram(word1, word2)) {\n          anagrams.push(`${word1} ${word2}`);\n        }\n\n        if (isMetagram(word1, word2)) {\n          metagrams.push(`${word1} ${word2}`);\n        }\n\n        if (isMetanagram(word1, word2)) {\n          metanagrams.push(`${word1} ${word2}`);\n        }\n      }\n\n      if (isTlenogram(word1, word2)) {\n        tlenograms.push(`${word1} ${word2}`);\n      }\n\n      if (isPlusogram(word1, word2)) {\n        plusograms.push(`${word1} ${word2}`);\n      }\n\n      if (isLogogrif(word1, word2)) {\n        logogrifs.push(`${word1} ${word2}`);\n      }\n\n      if (isLogogrif2(word1, word2)) {\n        logogrifs2.push(`${word1} ${word2}`);\n      }\n\n      if (isMetagrif(word1, word2)) {\n        metagrifs.push(`${word1} ${word2}`);\n      }\n\n      if (isBrukva(word1, word2)) {\n        brukvas.push(`${word1} ${word2}`);\n      }\n\n      if (isTikva(word1, word2)) {\n        tikvas.push(`${word1} ${word2}`);\n      }\n\n      const hybrid3 = createHybrid3(word1, word2);\n      if (hybrid3) {\n        hybrids3.push(hybrid3);\n      }\n\n      const hybrid4 = createHybrid4(word1, word2);\n      if (hybrid4) {\n        hybrids4.push(hybrid4);\n      }\n\n      const sharada = createSharada(word1, word2, dictionary.sanstv);\n      if (sharada) {\n        sharadas.push(sharada);\n      }\n\n      golovahvosts.push(...createGolovahvosts(word1, word2, dictionary.sociation));\n    });\n  });\n\n  return (\n    <Container>\n      <Grid padded>\n        <Grid.Row>\n          <Grid.Column>\n            <Form>\n              <TextArea\n                autoFocus\n                value={data}\n                placeholder=\"Данные\"\n                onChange={handleDataChange}\n              />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n        {anagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Анаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {anagrams.map((anagram, i) => (\n                  <Label\n                    horizontal\n                    key={anagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {anagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {plusograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Плюсограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {plusograms.map((plusogram, i) => (\n                  <Label\n                    horizontal\n                    key={plusogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {plusogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrams.map((metagram, i) => (\n                  <Label\n                    horizontal\n                    key={metagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metanagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метанаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metanagrams.map((metanagram, i) => (\n                  <Label\n                    horizontal\n                    key={metanagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metanagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {tlenograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Тленограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {tlenograms.map((tlenogram, i) => (\n                  <Label\n                    horizontal\n                    key={tlenogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {tlenogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs.map((logogrif, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs2.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы +2</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs2.map((logogrif2, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif2}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif2}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метагрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrifs.map((metagrif, i) => (\n                  <Label\n                    horizontal\n                    key={metagrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {brukvas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Брюквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {brukvas.map((brukva, i) => (\n                  <Label\n                    horizontal\n                    key={brukva}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {brukva}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {tikvas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Тыквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {tikvas.map((tikva, i) => (\n                  <Label\n                    horizontal\n                    key={tikva}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {tikva}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {hybrids3.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Гибриды 3 буквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {hybrids3.map((hybrid3, i) => (\n                  <Label\n                    horizontal\n                    key={hybrid3}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {hybrid3}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {hybrids4.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Гибриды 4 буквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {hybrids4.map((hybrid4, i) => (\n                  <Label\n                    horizontal\n                    key={hybrid4}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {hybrid4}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {sharadas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Шарады</Header>\n              </Divider>\n              <div className={styles.words}>\n                {sharadas.map((sharada, i) => (\n                  <Label\n                    horizontal\n                    key={sharada}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {sharada}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {golovahvosts.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Головахвосты</Header>\n              </Divider>\n              <div className={styles.words}>\n                {golovahvosts.map((golovahvost, i) => (\n                  <Label\n                    horizontal\n                    key={golovahvost}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {golovahvost}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default withAuth(App);\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback(({ target: { value: nextValue } }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}