{"version":3,"sources":["with-auth.jsx","use-field.js","App.jsx","index.js","App.module.css"],"names":["WrappedComponent","initialValue","useState","value","setValue","useCallback","_","nextValue","FORMATS_MAP","DICTIONARIES_MAP","withAuth","dictionary","setDictionary","Set","map","selectedFormatsSet","setSelectedFormatsSet","useField","selectedDictionary","handleSelectedDictionaryChange","words","handleWordsChange","useDebounce","wordsDebounced","wordsClean","useMemo","trim","toLowerCase","replace","split","filter","word","index","self","indexOf","formats","console","log","reduce","result","format","has","forEach","word1","i","word2","j","anagrams","length","sort","join","isAnagram","push","metagrams","hasDifference","charAt","isMetagram","metanagrams","isMetanagram","plusograms","word1Sorted","word2Sorted","isPlusogram","tlenograms","isTlenogram","logogrifs","isLogogrif","logogrifs2","totalDifferences","isLogogrif2","metagrifs","isMetagrif","brukvas","isBrukva","tikvas","isTikva","hybrids3","hybrid3","intersection","slice","toUpperCase","createHybrid3","hybrids4","hybrid4","createHybrid4","sharadas","sharada","dictionarySet","createSharada","set","golovahvosts","word1Tail","createGolovahvosts","getFormats","handleSelectedFormatChange","useEffect","a","async","sanstv","sociation","array","className","styles","header","Container","Grid","padded","Row","Column","width","Form","TextArea","autoFocus","placeholder","onChange","Modal","size","trigger","Button","icon","Header","content","Content","Group","grouped","formatLabel","Checkbox","key","label","checked","dictionaryLabel","Radio","Divider","horizontal","as","title","Label","classNames","odd","Loader","active","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.caea69d8.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'zhP4FC';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback((_, { value: nextValue }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Button, Container, Divider, Form, Grid, Header, Label, Loader, Modal, TextArea\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst FORMATS_MAP = [\n  ['anagrams', 'Анаграммы'],\n  ['plusograms', 'Плюсограммы'],\n  ['metagrams', 'Метаграммы'],\n  ['metanagrams', 'Метанаграммы'],\n  ['tlenograms', 'Тленограммы'],\n  ['logogrifs', 'Логогрифы'],\n  ['logogrifs2', 'Логогрифы +2'],\n  ['metagrifs', 'Метагрифы'],\n  ['brukvas', 'Брюквы'],\n  ['tikvas', 'Тыквы'],\n  ['hybrids3', 'Гибриды (3)'],\n  ['hybrids4', 'Гибриды (4)'],\n  ['sharadas', 'Шарады'],\n  ['golovahvosts', 'Головахвосты'],\n];\n\nconst DICTIONARIES_MAP = [\n  ['sanstv', 'sanstv.ru'],\n  ['sociation', 'sociation.org'],\n];\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n}\n\nconst isTlenogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 2;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      totalDifferences++;\n\n      if (totalDifferences > 2) {\n        break;\n      }\n    }\n  }\n\n  if (totalDifferences === 2) {\n    return true;\n  }\n\n  totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +(totalDifferences === 2)) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isTikva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1 || totalDifferences === 2) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 3) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 3;\n}\n\nconst createHybrid3 = (word1, word2) => {\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n}\n\nconst createHybrid4 = (word1, word2) => {\n  const intersection = word1.slice(-4);\n  if (word2.slice(0, 4) === intersection) {\n    return word1.slice(0, -4) + intersection.toUpperCase() + word2.slice(4);\n  }\n\n  return null;\n}\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\nconst createGolovahvosts = (word1, word2, dictionarySet) => {\n  if (word1.length < 2 || word2.length < 2) {\n    return [];\n  }\n\n  const golovahvosts = [];\n  for (let i = 1; i < word1.length; i++) {\n    const word1Tail = word1.slice(i);\n\n    for (let j = 1; j < word2.length; j++) {\n      const word = word1Tail + word2.slice(0, -j);\n      if (word.length > 3 && dictionarySet.has(word)) {\n        golovahvosts.push(word1.slice(0, i) + word.toUpperCase() + word2.slice(-j));\n      }\n    }\n  }\n\n  return golovahvosts;\n};\n\nconst getFormats = (words, dictionary, selectedFormatsSet) => {\n  const formats = FORMATS_MAP.reduce((result, [format]) => {\n    if (selectedFormatsSet.has(format)) {\n      return {\n        ...result,\n        [format]: [],\n      }\n    }\n\n    return result;\n  }, {});\n\n  words.forEach((word1, i) => {\n    words.forEach((word2, j) => {\n      if (j === i) {\n        return;\n      }\n\n      if (j > i) {\n        if (formats.anagrams && isAnagram(word1, word2)) {\n          formats.anagrams.push(`${word1} ${word2}`);\n        }\n\n        if (formats.metagrams && isMetagram(word1, word2)) {\n          formats.metagrams.push(`${word1} ${word2}`);\n        }\n\n        if (formats.metanagrams && isMetanagram(word1, word2)) {\n          formats.metanagrams.push(`${word1} ${word2}`);\n        }\n      }\n\n      if (formats.plusograms && isPlusogram(word1, word2)) {\n        formats.plusograms.push(`${word1} ${word2}`);\n      }\n\n      if (formats.tlenograms && isTlenogram(word1, word2)) {\n        formats.tlenograms.push(`${word1} ${word2}`);\n      }\n\n      if (formats.logogrifs && isLogogrif(word1, word2)) {\n        formats.logogrifs.push(`${word1} ${word2}`);\n      }\n\n      if (formats.logogrifs2 && isLogogrif2(word1, word2)) {\n        formats.logogrifs2.push(`${word1} ${word2}`);\n      }\n\n      if (formats.metagrifs && isMetagrif(word1, word2)) {\n        formats.metagrifs.push(`${word1} ${word2}`);\n      }\n\n      if (formats.brukvas && isBrukva(word1, word2)) {\n        formats.brukvas.push(`${word1} ${word2}`);\n      }\n\n      if (formats.tikvas && isTikva(word1, word2)) {\n        formats.tikvas.push(`${word1} ${word2}`);\n      }\n\n      if (formats.hybrids3) {\n        const hybrid3 = createHybrid3(word1, word2);\n        if (hybrid3) {\n          formats.hybrids3.push(hybrid3);\n        }\n      }\n\n      if (formats.hybrids4) {\n        const hybrid4 = createHybrid4(word1, word2);\n        if (hybrid4) {\n          formats.hybrids4.push(hybrid4);\n        }\n      }\n\n      if (formats.sharadas) {\n        const sharada = createSharada(word1, word2, dictionary.set);\n        if (sharada) {\n          formats.sharadas.push(sharada);\n        }\n      }\n\n      if (formats.golovahvosts) {\n        formats.golovahvosts.push(...createGolovahvosts(word1, word2, dictionary.set));\n      }\n    });\n  });\n\n  return formats;\n}\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n\n  const [selectedFormatsSet, setSelectedFormatsSet] = useState(\n    new Set(FORMATS_MAP.map(([format]) => format)),\n  );\n\n  const [selectedDictionary, handleSelectedDictionaryChange] = useField('sanstv');\n  const [words, handleWordsChange] = useField('');\n  const [wordsDebounced] = useDebounce(words, 500);\n\n  const wordsClean = useMemo(\n    () =>\n      wordsDebounced\n        .trim()\n        .toLowerCase()\n        .replace('ё', 'е')\n        .split(/\\s+/)\n        .filter((word, index, self) => {\n          return index === self.indexOf(word);\n        }),\n    [wordsDebounced],\n  );\n\n  const formats = useMemo(() => {\n    if (!dictionary) {\n      return {};\n    }\n\n    console.log('!');\n    return getFormats(wordsClean, dictionary[selectedDictionary], selectedFormatsSet);\n  }, [dictionary, selectedFormatsSet, selectedDictionary, wordsClean]);\n\n  const handleSelectedFormatChange = useCallback((_, { value }) => {\n    if (selectedFormatsSet.has(value)) {\n      setSelectedFormatsSet(new Set([...selectedFormatsSet].filter(format => format !== value)));\n    } else {\n      setSelectedFormatsSet(new Set([...selectedFormatsSet, value]));\n    }\n  }, [selectedFormatsSet]);\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./dictionary.json');\n\n      setDictionary({\n        sanstv: {\n          array: sanstv,\n          set: new Set(sanstv),\n        },\n        sociation: {\n          array: sociation,\n          set: new Set(sociation),\n        },\n      });\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded>\n            <Grid.Row>\n              <Grid.Column width={15}>\n                <Form>\n                  <TextArea\n                    autoFocus\n                    value={words}\n                    placeholder=\"Слова\"\n                    onChange={handleWordsChange}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column>\n                <Modal size=\"mini\" trigger={<Button icon=\"setting\" />}>\n                  <Header icon=\"setting\" content=\"Настройки\" />\n                  <Modal.Content>\n                    <Form>\n                      <Form.Group grouped>\n                        <label>Форматы</label>\n                        {FORMATS_MAP.map(([format, formatLabel]) => (\n                          <Form.Checkbox\n                            key={format}\n                            value={format}\n                            label={formatLabel}\n                            checked={selectedFormatsSet.has(format)}\n                            onChange={handleSelectedFormatChange}\n                          />\n                        ))}\n                      </Form.Group>\n                      <Form.Group grouped>\n                        <label>Словарь</label>\n                        {DICTIONARIES_MAP.map(([dictionary, dictionaryLabel]) => (\n                          <Form.Radio\n                            key={dictionary}\n                            value={dictionary}\n                            label={dictionaryLabel}\n                            checked={dictionary === selectedDictionary}\n                            onChange={handleSelectedDictionaryChange}\n                          />\n                        ))}\n                      </Form.Group>\n                    </Form>\n                  </Modal.Content>\n                </Modal>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            {FORMATS_MAP.filter(([format]) => formats[format] && formats[format].length > 0).map(\n              ([format, formatLabel]) => (\n                <Grid.Row key={format}>\n                  <Grid.Column>\n                    <Divider horizontal>\n                      <Header as=\"h4\" className={styles.title}>\n                        {formatLabel}\n                      </Header>\n                    </Divider>\n                    <div className={styles.words}>\n                      {formats[format].map((word, i) => (\n                        <Label\n                          horizontal\n                          key={word}\n                          className={classNames(styles.word, i % 2 && styles.odd)}\n                        >\n                          {word}\n                        </Label>\n                      ))}\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              ),\n            )}\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}