{"version":3,"sources":["with-auth.jsx","App.jsx","use-field.js","index.js","App.module.css"],"names":["WrappedComponent","withAuth","useState","dictionary","setDictionary","initialValue","value","setValue","useCallback","nextValue","target","useField","data","handleDataChange","useDebounce","dataDebounced","words","useMemo","trim","toLowerCase","replace","split","filter","word","index","self","indexOf","dictionarySanstv","dictionarySociation","anagrams","plusograms","metagrams","metanagrams","tlenograms","logogrifs","logogrifs2","metagrifs","brukvas","tikvas","hybrids3","hybrids4","sharadas","golovahvosts","forEach","word1","i","word2","j","length","sort","join","isAnagram","push","hasDifference","charAt","isMetagram","isMetanagram","word1Sorted","word2Sorted","isPlusogram","isTlenogram","isLogogrif","totalDifferences","isLogogrif2","isMetagrif","isBrukva","isTikva","hybrid3","intersection","slice","toUpperCase","createHybrid3","hybrid4","createHybrid4","sharada","dictionarySet","has","createSharada","set","word1Tail","createGolovahvosts","getFormats","sanstv","sociation","useEffect","a","async","array","Set","Container","Grid","padded","Row","Column","Form","TextArea","autoFocus","placeholder","onChange","Divider","horizontal","Header","as","className","styles","title","map","anagram","Label","key","classNames","odd","plusogram","metagram","metanagram","tlenogram","logogrif","logogrif2","metagrif","brukva","tikva","golovahvost","Loader","active","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7de8d3a1.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'zhP4FC';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Container, Divider, Form, Grid, Header, Label, Loader, TextArea\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isTlenogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isTikva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1 || totalDifferences === 2) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 3) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 3;\n}\n\nconst createHybrid3 = (word1, word2) => {\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n}\n\nconst createHybrid4 = (word1, word2) => {\n  const intersection = word1.slice(-4);\n  if (word2.slice(0, 4) === intersection) {\n    return word1.slice(0, -4) + intersection.toUpperCase() + word2.slice(4);\n  }\n\n  return null;\n}\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\nconst createGolovahvosts = (word1, word2, dictionarySet) => {\n  if (word1.length < 2 || word2.length < 2) {\n    return [];\n  }\n\n  const golovahvosts = [];\n  for (let i = 1; i < word1.length; i++) {\n    const word1Tail = word1.slice(i);\n\n    for (let j = 1; j < word2.length; j++) {\n      const word = word1Tail + word2.slice(0, -j);\n      if (word.length > 3 && dictionarySet.has(word)) {\n        golovahvosts.push(word1.slice(0, i) + word.toUpperCase() + word2.slice(-j));\n      }\n    }\n  }\n\n  return golovahvosts;\n};\n\nconst getFormats = (words, dictionarySanstv, dictionarySociation) => {\n  const anagrams = [];\n  const plusograms = [];\n  const metagrams = [];\n  const metanagrams = [];\n  const tlenograms = [];\n  const logogrifs = [];\n  const logogrifs2 = [];\n  const metagrifs = [];\n  const brukvas = [];\n  const tikvas = [];\n  const hybrids3 = [];\n  const hybrids4 = [];\n  const sharadas = [];\n  const golovahvosts = [];\n\n  words.forEach((word1, i) => {\n    words.forEach((word2, j) => {\n      if (j === i) {\n        return;\n      }\n\n      if (j > i) {\n        if (isAnagram(word1, word2)) {\n          anagrams.push(`${word1} ${word2}`);\n        }\n\n        if (isMetagram(word1, word2)) {\n          metagrams.push(`${word1} ${word2}`);\n        }\n\n        if (isMetanagram(word1, word2)) {\n          metanagrams.push(`${word1} ${word2}`);\n        }\n      }\n\n      if (isPlusogram(word1, word2)) {\n        plusograms.push(`${word1} ${word2}`);\n      }\n\n      if (isTlenogram(word1, word2)) {\n        tlenograms.push(`${word1} ${word2}`);\n      }\n\n      if (isLogogrif(word1, word2)) {\n        logogrifs.push(`${word1} ${word2}`);\n      }\n\n      if (isLogogrif2(word1, word2)) {\n        logogrifs2.push(`${word1} ${word2}`);\n      }\n\n      if (isMetagrif(word1, word2)) {\n        metagrifs.push(`${word1} ${word2}`);\n      }\n\n      if (isBrukva(word1, word2)) {\n        brukvas.push(`${word1} ${word2}`);\n      }\n\n      if (isTikva(word1, word2)) {\n        tikvas.push(`${word1} ${word2}`);\n      }\n\n      const hybrid3 = createHybrid3(word1, word2);\n      if (hybrid3) {\n        hybrids3.push(hybrid3);\n      }\n\n      const hybrid4 = createHybrid4(word1, word2);\n      if (hybrid4) {\n        hybrids4.push(hybrid4);\n      }\n\n      const sharada = createSharada(word1, word2, dictionarySanstv.set);\n      if (sharada) {\n        sharadas.push(sharada);\n      }\n\n      golovahvosts.push(...createGolovahvosts(word1, word2, dictionarySociation.set));\n    });\n  });\n\n  return {\n    anagrams,\n    plusograms,\n    metagrams,\n    metanagrams,\n    tlenograms,\n    logogrifs,\n    logogrifs2,\n    metagrifs,\n    brukvas,\n    tikvas,\n    hybrids3,\n    hybrids4,\n    sharadas,\n    golovahvosts,\n  };\n}\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n  const [data, handleDataChange] = useField('');\n  const [dataDebounced] = useDebounce(data, 500);\n\n  const words = useMemo(\n    () =>\n      dataDebounced\n        .trim()\n        .toLowerCase()\n        .replace('ё', 'е')\n        .split(/\\s+/)\n        .filter((word, index, self) => {\n          return index === self.indexOf(word);\n        }),\n    [dataDebounced],\n  );\n\n  const {\n    anagrams,\n    plusograms,\n    metagrams,\n    metanagrams,\n    tlenograms,\n    logogrifs,\n    logogrifs2,\n    metagrifs,\n    brukvas,\n    tikvas,\n    hybrids3,\n    hybrids4,\n    sharadas,\n    golovahvosts,\n  } = useMemo(() => {\n    if (!dictionary) {\n      return {};\n    }\n\n    return getFormats(words, dictionary.sanstv, dictionary.sociation);\n  }, [dictionary, words]);\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./dictionary.json');\n\n      setDictionary({\n        sanstv: {\n          array: sanstv,\n          set: new Set(sanstv),\n        },\n        sociation: {\n          array: sociation,\n          set: new Set(sociation),\n        },\n      });\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <Container>\n      <Grid padded>\n        <Grid.Row>\n          <Grid.Column>\n            <Form>\n              <TextArea\n                autoFocus\n                value={data}\n                placeholder=\"Данные\"\n                onChange={handleDataChange}\n              />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n        {anagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Анаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {anagrams.map((anagram, i) => (\n                  <Label\n                    horizontal\n                    key={anagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {anagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {plusograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Плюсограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {plusograms.map((plusogram, i) => (\n                  <Label\n                    horizontal\n                    key={plusogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {plusogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrams.map((metagram, i) => (\n                  <Label\n                    horizontal\n                    key={metagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metanagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метанаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metanagrams.map((metanagram, i) => (\n                  <Label\n                    horizontal\n                    key={metanagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metanagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {tlenograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Тленограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {tlenograms.map((tlenogram, i) => (\n                  <Label\n                    horizontal\n                    key={tlenogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {tlenogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs.map((logogrif, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs2.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы +2</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs2.map((logogrif2, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif2}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif2}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метагрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrifs.map((metagrif, i) => (\n                  <Label\n                    horizontal\n                    key={metagrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {brukvas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Брюквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {brukvas.map((brukva, i) => (\n                  <Label\n                    horizontal\n                    key={brukva}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {brukva}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {tikvas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Тыквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {tikvas.map((tikva, i) => (\n                  <Label\n                    horizontal\n                    key={tikva}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {tikva}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {hybrids3.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Гибриды (3)</Header>\n              </Divider>\n              <div className={styles.words}>\n                {hybrids3.map((hybrid3, i) => (\n                  <Label\n                    horizontal\n                    key={hybrid3}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {hybrid3}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {hybrids4.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Гибриды (4)</Header>\n              </Divider>\n              <div className={styles.words}>\n                {hybrids4.map((hybrid4, i) => (\n                  <Label\n                    horizontal\n                    key={hybrid4}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {hybrid4}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {sharadas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Шарады</Header>\n              </Divider>\n              <div className={styles.words}>\n                {sharadas.map((sharada, i) => (\n                  <Label\n                    horizontal\n                    key={sharada}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {sharada}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {golovahvosts.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Головахвосты</Header>\n              </Divider>\n              <div className={styles.words}>\n                {golovahvosts.map((golovahvost, i) => (\n                  <Label\n                    horizontal\n                    key={golovahvost}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {golovahvost}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default withAuth(App);\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback(({ target: { value: nextValue } }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}