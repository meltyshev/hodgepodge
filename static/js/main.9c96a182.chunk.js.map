{"version":3,"sources":["with-auth.jsx","App.jsx","use-field.js","index.js","App.module.css"],"names":["WrappedComponent","withAuth","useState","dictionary","setDictionary","initialValue","value","setValue","useCallback","nextValue","target","useField","data","handleDataChange","useDebounce","dataDebounced","useEffect","a","async","Set","default","Loader","active","words","trim","toLowerCase","replace","split","filter","word","index","self","indexOf","anagrams","plusograms","metagrams","logogrifs","logogrifs2","brukvas","hybrids","sharadas","golovahvosts","forEach","word1","i","word2","j","length","sort","join","isAnagram","push","hasDifference","charAt","isMetagram","word1Sorted","word2Sorted","isPlusogram","isLogogrif","totalDifferences","isLogogrif2","isBrukva","hybrid","intersection","slice","toUpperCase","createHybrid","sharada","has","createSharada","word1Tail","createGolovahvosts","Container","Grid","padded","Row","Column","Form","TextArea","autoFocus","placeholder","onChange","Divider","horizontal","Header","as","className","styles","title","map","anagram","Label","key","classNames","odd","plusogram","metagram","logogrif","logogrif2","brukva","golovahvost","useMemo","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9c96a182.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = '9ZAJzZ';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Container, Divider, Form, Grid, Header, Label, Loader, TextArea\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n}\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n}\n\nconst createHybrid = (word1, word2) => {\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n}\n\nconst createSharada = (word1, word2, dictionary) => {\n  const word = word1 + word2;\n  if (dictionary.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\nconst createGolovahvosts = (word1, word2, dictionary) => {\n  if (word1.length < 2 || word2.length < 2) {\n    return [];\n  }\n\n  const golovahvosts = [];\n  for (let i = 1; i < word1.length; i++) {\n    const word1Tail = word1.slice(i);\n\n    for (let j = 1; j < word2.length; j++) {\n      const word = word1Tail + word2.slice(0, -j);\n      if (word.length > 4 && dictionary.has(word)) {\n        golovahvosts.push(word1.slice(0, i) + word.toUpperCase() + word2.slice(-j));\n      }\n    }\n  }\n\n  return golovahvosts;\n};\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n  const [data, handleDataChange] = useField('');\n  const [dataDebounced] = useDebounce(data, 500);\n\n  useEffect(() => {\n    (async () => {\n      setDictionary(new Set((await import('./dictionary.json')).default));\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  const words = dataDebounced\n    .trim()\n    .toLowerCase()\n    .replace('ё', 'е')\n    .split(/\\s+/)\n    .filter((word, index, self) => {\n      return index === self.indexOf(word);\n    });\n\n  const anagrams = [];\n  const plusograms = [];\n  const metagrams = [];\n  const logogrifs = [];\n  const logogrifs2 = [];\n  const brukvas = [];\n  const hybrids = [];\n  const sharadas = [];\n  const golovahvosts = [];\n\n  words.forEach((word1, i) => {\n    words.forEach((word2, j) => {\n      if (j === i) {\n        return;\n      }\n\n      if (j > i) {\n        if (isAnagram(word1, word2)) {\n          anagrams.push(`${word1} ${word2}`);\n        }\n\n        if (isMetagram(word1, word2)) {\n          metagrams.push(`${word1} ${word2}`);\n        }\n      }\n\n      if (isPlusogram(word1, word2)) {\n        plusograms.push(`${word1} ${word2}`);\n      }\n\n      if (isLogogrif(word1, word2)) {\n        logogrifs.push(`${word1} ${word2}`);\n      }\n\n      if (isLogogrif2(word1, word2)) {\n        logogrifs2.push(`${word1} ${word2}`);\n      }\n\n      if (isBrukva(word1, word2)) {\n        brukvas.push(`${word1} ${word2}`);\n      }\n\n      const hybrid = createHybrid(word1, word2);\n      if (hybrid) {\n        hybrids.push(hybrid);\n      }\n\n      const sharada = createSharada(word1, word2, dictionary);\n      if (sharada) {\n        sharadas.push(sharada);\n      }\n\n      golovahvosts.push(...createGolovahvosts(word1, word2, dictionary));\n    });\n  });\n\n  return (\n    <Container>\n      <Grid padded>\n        <Grid.Row>\n          <Grid.Column>\n            <Form>\n              <TextArea\n                autoFocus\n                value={data}\n                placeholder=\"Данные\"\n                onChange={handleDataChange}\n              />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n        {anagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Анаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {anagrams.map((anagram, i) => (\n                  <Label\n                    horizontal\n                    key={anagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {anagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {plusograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Плюсограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {plusograms.map((plusogram, i) => (\n                  <Label\n                    horizontal\n                    key={plusogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {plusogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrams.map((metagram, i) => (\n                  <Label\n                    horizontal\n                    key={metagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs.map((logogrif, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs2.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы +2</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs2.map((logogrif2, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif2}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif2}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {brukvas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Брюквы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {brukvas.map((brukva, i) => (\n                  <Label\n                    horizontal\n                    key={brukva}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {brukva}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {hybrids.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Гибриды</Header>\n              </Divider>\n              <div className={styles.words}>\n                {hybrids.map((hybrid, i) => (\n                  <Label\n                    horizontal\n                    key={hybrid}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {hybrid}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {sharadas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Шарады</Header>\n              </Divider>\n              <div className={styles.words}>\n                {sharadas.map((sharada, i) => (\n                  <Label\n                    horizontal\n                    key={sharada}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {sharada}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {golovahvosts.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Головахвосты</Header>\n              </Divider>\n              <div className={styles.words}>\n                {golovahvosts.map((golovahvost, i) => (\n                  <Label\n                    horizontal\n                    key={golovahvost}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {golovahvost}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default withAuth(App);\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback(({ target: { value: nextValue } }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__1D8iZ\",\"words\":\"App_words__3TPqA\",\"word\":\"App_word__30kB3\",\"odd\":\"App_odd__3y1kT\"};"],"sourceRoot":""}