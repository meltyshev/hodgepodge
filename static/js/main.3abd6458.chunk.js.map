{"version":3,"sources":["App.module.css","with-auth.jsx","App.jsx","use-field.js","index.js"],"names":["module","exports","WrappedComponent","withAuth","useState","dictionary","setDictionary","initialValue","value","setValue","useCallback","nextValue","target","useField","data","handleDataChange","useDebounce","dataDebounced","useEffect","a","async","Set","default","Loader","active","words","trim","toLowerCase","replace","split","anagrams","plusograms","metagrams","logogrifs","hybrids","sharadas","forEach","word1","word2","sort","join","isAnagram","push","Math","abs","length","wordMinSorted","wordMaxSorted","word1Sorted","word2Sorted","founded","i","charAt","isPlusogram","isMetagram","wordMin","wordMax","isLogogrif","hybrid","slice","createHybrid","includes","sharada","word","has","createSharada","Container","Grid","padded","Row","Column","Form","TextArea","autoFocus","placeholder","onChange","Divider","horizontal","Header","as","className","styles","title","map","anagram","Label","key","classNames","odd","plusogram","metagram","logogrif","useMemo","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3abd6458.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};","import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'S2nLwG';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport {\n  Container, Divider, Form, Grid, Header, Label, Loader, TextArea\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst isAnagram = (word1, word2) => {\n  return word1.split('').sort().join('') === word2.split('').sort().join('');\n}\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let founded = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (founded) {\n        return false;\n      }\n\n      founded = true;\n    }\n  }\n\n  return founded;\n}\n\nconst isPlusogram = (word1, word2) => {\n  if (Math.abs(word1.length - word2.length) !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let wordMinSorted;\n  let wordMaxSorted;\n\n  if (word1Sorted.length > word2Sorted.length) {\n    wordMinSorted = word2Sorted;\n    wordMaxSorted = word1Sorted;\n  } else {\n    wordMinSorted = word1Sorted;\n    wordMaxSorted = word2Sorted;\n  }\n\n  let founded = false;\n  for (let i = 0; i < wordMaxSorted.length; i++) {\n    if (wordMinSorted.charAt(founded ? (i - 1) : i) !== wordMaxSorted.charAt(i)) {\n      if (founded) {\n        return false;\n      }\n\n      founded = true;\n    }\n  }\n\n  return founded;\n}\n\nconst isLogogrif = (word1, word2) => {\n  if (Math.abs(word1.length - word2.length) !== 1) {\n    return false;\n  }\n\n  let wordMin;\n  let wordMax;\n\n  if (word1.length > word2.length) {\n    wordMin = word2;\n    wordMax = word1;\n  } else {\n    wordMin = word1;\n    wordMax = word2;\n  }\n\n  let founded = false;\n  for (let i = 0; i < wordMax.length; i++) {\n    if (wordMin.charAt(founded ? (i - 1) : i) !== wordMax.charAt(i)) {\n      if (founded) {\n        return false;\n      }\n\n      founded = true;\n    }\n  }\n\n  return founded;\n}\n\nconst createHybrid = (word1, word2) => {\n  if (word1.slice(0, 3) === word2.slice(-3)) {\n    return word2 + word1.slice(3);\n  }\n\n  if (word2.slice(0, 3) === word1.slice(-3)) {\n    return word1 + word2.slice(3);\n  }\n\n  return null;\n}\n\nconst createSharada = (word1, word2, dictionary) => {\n  let word = word1 + word2;\n  if (dictionary.has(word)) {\n    return word;\n  }\n\n  word = word2 + word1;\n  if (dictionary.has(word)) {\n    return word;\n  }\n\n  return null;\n}\n\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState(null);\n  const [data, handleDataChange] = useField('');\n  const [dataDebounced] = useDebounce(data, 500);\n\n  useEffect(() => {\n    (async () => {\n      setDictionary(new Set((await import('./dictionary.json')).default));\n    })();\n  }, []);\n\n  if (!dictionary) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  const words = dataDebounced.trim().toLowerCase().replace('ё', 'е').split(/\\s+/);\n\n  const anagrams = [];\n  const plusograms = [];\n  const metagrams = [];\n  const logogrifs = [];\n  const hybrids = [];\n  const sharadas = [];\n\n  words.forEach((word1) => {\n    words.forEach((word2) => {\n      if (word1 !== word2) {\n        if (isAnagram(word1, word2)) {\n          anagrams.push(`${word1} ${word2}`);\n        }\n\n        if (isPlusogram(word1, word2)) {\n          plusograms.push(`${word1} ${word2}`);\n        }\n\n        if (isMetagram(word1, word2)) {\n          metagrams.push(`${word1} ${word2}`);\n        }\n\n        if (isLogogrif(word1, word2)) {\n          logogrifs.push(`${word1} ${word2}`);\n        }\n\n        const hybrid = createHybrid(word1, word2);\n        if (hybrid && !hybrids.includes(hybrid)) {\n          hybrids.push(hybrid);\n        }\n\n        const sharada = createSharada(word1, word2, dictionary);\n        if (sharada && !sharadas.includes(sharada)) {\n          sharadas.push(sharada);\n        }\n      }\n    });\n  });\n\n  return (\n    <Container>\n      <Grid padded>\n        <Grid.Row>\n          <Grid.Column>\n            <Form>\n              <TextArea\n                autoFocus\n                value={data}\n                placeholder=\"Данные\"\n                onChange={handleDataChange}\n              />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n        {anagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Анаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {anagrams.map((anagram, i) => (\n                  <Label\n                    horizontal\n                    key={anagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {anagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {plusograms.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Плюсограммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {plusograms.map((plusogram, i) => (\n                  <Label\n                    horizontal\n                    key={plusogram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {plusogram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {metagrams.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Метаграммы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {metagrams.map((metagram, i) => (\n                  <Label\n                    horizontal\n                    key={metagram}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {metagram}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {logogrifs.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Логогрифы</Header>\n              </Divider>\n              <div className={styles.words}>\n                {logogrifs.map((logogrif, i) => (\n                  <Label\n                    horizontal\n                    key={logogrif}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {logogrif}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {hybrids.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Гибриды</Header>\n              </Divider>\n              <div className={styles.words}>\n                {hybrids.map((hybrid, i) => (\n                  <Label\n                    horizontal\n                    key={hybrid}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {hybrid}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n        {sharadas.length > 0 && (\n          <Grid.Row>\n            <Grid.Column>\n              <Divider horizontal>\n                <Header as=\"h4\" className={styles.title}>Шарады</Header>\n              </Divider>\n              <div className={styles.words}>\n                {sharadas.map((sharada, i) => (\n                  <Label\n                    horizontal\n                    key={sharada}\n                    className={classNames(styles.word, i % 2 && styles.odd)}\n                  >\n                    {sharada}\n                  </Label>\n                ))}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default withAuth(App);\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback(({ target: { value: nextValue } }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}