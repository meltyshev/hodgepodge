{"version":3,"sources":["with-auth.jsx","use-field.js","App.jsx","index.js","App.module.css"],"names":["WrappedComponent","initialValue","useState","value","setValue","useCallback","_","nextValue","FORMATS_MAP","DICTIONARIES_MAP","withAuth","database","setDatabase","Set","map","selectedFormatsSet","setSelectedFormatsSet","useField","selectedDictionary","handleSelectedDictionaryChange","setSelectedDictionary","words","handleWordsChange","useDebounce","wordsDebounced","wordsClean","useMemo","trim","toLowerCase","replaceAll","split","row","formats","dictionarySet","reduce","result","format","has","forEach","row1","i","row2","j","word1","length","test","word2","word","anagrams","includes","sort","join","isAnagram","push","metagrams","hasDifference","charAt","isMetagram","metanagrams","replace","isMetanagram","plusograms","word1Sorted","word2Sorted","isPlusogram","tlenograms","isTlenogram","logogrifs","isLogogrif","logogrifs2","totalDifferences","isLogogrif2","metagrifs","isMetagrif","brukvas","isBrukva","tikvas","isTikva","hybrids3","hybrid3","intersection","slice","toUpperCase","createHybrid3","hybrids4","hybrid4","createHybrid4","sharadas","sharada","createSharada","golovahvosts","word1Tail","createGolovahvosts","golovahvost","getFormats","set","handleSelectedFormatChange","filter","useEffect","a","async","sanstv","sociation","array","useHotkeys","find","className","styles","header","Container","Grid","padded","Row","Column","width","Form","TextArea","autoFocus","placeholder","onChange","Modal","size","trigger","Button","icon","Header","content","Content","Group","grouped","formatLabel","Checkbox","key","label","checked","dictionary","dictionaryLabel","Radio","Divider","horizontal","as","title","Label","classNames","odd","Loader","active","window","location","hostname","URLSearchParams","search","get","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ee30a116.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\nconst HOSTNAME = 'meltyshev.github.io';\nconst TOKEN = 'rwJ4AZ';\n\nexport default WrappedComponent => {\n  const Auth = () => {\n    const isAuthenticated = useMemo(() => {\n      if (process.env.NODE_ENV === 'development') {\n        return true;\n      }\n\n      return window.location.hostname === HOSTNAME\n        && new URLSearchParams(window.location.search).get('token') === TOKEN;\n    }, []);\n\n    if (!isAuthenticated) {\n      return 'Unauthorized';\n    }\n\n    return <WrappedComponent />;\n  };\n\n  return Auth;\n};\n","import { useCallback, useState } from 'react';\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = useCallback((_, { value: nextValue }) => {\n    setValue(nextValue);\n  }, []);\n\n  return [value, handleChange, setValue];\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDebounce } from 'use-debounce';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport {\n  Button,\n  Container,\n  Divider,\n  Form,\n  Grid,\n  Header,\n  Label,\n  Loader,\n  Modal,\n  TextArea,\n} from 'semantic-ui-react';\n\nimport withAuth from './with-auth';\nimport useField from './use-field';\n\nimport styles from './App.module.css';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst FORMATS_MAP = [\n  ['anagrams', 'Анаграммы'],\n  ['brukvas', 'Брюквы'],\n  ['hybrids3', 'Гибриды (3)'],\n  ['hybrids4', 'Гибриды (4)'],\n  ['golovahvosts', 'Головахвосты'],\n  ['logogrifs', 'Логогрифы'],\n  ['logogrifs2', 'Логогрифы +2'],\n  ['metagrams', 'Метаграммы'],\n  ['metagrifs', 'Метагрифы'],\n  ['metanagrams', 'Метанаграммы'],\n  ['plusograms', 'Плюсограммы'],\n  ['tlenograms', 'Тленограммы'],\n  ['tikvas', 'Тыквы'],\n  ['sharadas', 'Шарады'],\n];\n\nconst DICTIONARIES_MAP = [\n  ['sanstv', 'sanstv.ru'],\n  ['sociation', 'sociation.org'],\n];\n\nconst isAnagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  return word1Sorted === word2Sorted;\n};\n\nconst isPlusogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  const word1Sorted = word1.split('').sort().join('');\n  const word2Sorted = word2.split('').sort().join('');\n\n  let hasDifference = false;\n  for (let i = 0; i < word2Sorted.length; i++) {\n    if (word1Sorted.charAt(i - +hasDifference) !== word2Sorted.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isMetagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word1.length; i++) {\n    if (word1.charAt(i) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isMetanagram = (word1, word2) => {\n  if (word1.length !== word2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 1;\n};\n\nconst isTlenogram = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  for (let i = 0; i < word1.length; i++) {\n    word2 = word2.replace(word1.charAt(i), '');\n  }\n\n  return word2.length === 2;\n};\n\nconst isLogogrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let hasDifference = false;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +hasDifference) !== word2.charAt(i)) {\n      if (hasDifference) {\n        return false;\n      }\n\n      hasDifference = true;\n    }\n  }\n\n  return hasDifference;\n};\n\nconst isLogogrif2 = (word1, word2) => {\n  if (word2.length - word1.length !== 2) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isMetagrif = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) !== word2.charAt(i)) {\n      totalDifferences++;\n\n      if (totalDifferences > 2) {\n        break;\n      }\n    }\n  }\n\n  if (totalDifferences === 2) {\n    return true;\n  }\n\n  totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +(totalDifferences === 2)) !== word2.charAt(i)) {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isBrukva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 2) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 2;\n};\n\nconst isTikva = (word1, word2) => {\n  if (word2.length - word1.length !== 1) {\n    return false;\n  }\n\n  let totalDifferences = 0;\n  for (let i = 0; i < word2.length; i++) {\n    if (word1.charAt(i - +!!totalDifferences) === word2.charAt(i)) {\n      if (totalDifferences === 1 || totalDifferences === 2) {\n        return false;\n      }\n    } else {\n      if (totalDifferences === 3) {\n        return false;\n      }\n\n      totalDifferences++;\n    }\n  }\n\n  return totalDifferences === 3;\n};\n\nconst createHybrid3 = (word1, word2) => {\n  if (word1.length < 3 || word2.length < 3) {\n    return null;\n  }\n\n  const intersection = word1.slice(-3);\n  if (word2.slice(0, 3) === intersection) {\n    return word1.slice(0, -3) + intersection.toUpperCase() + word2.slice(3);\n  }\n\n  return null;\n};\n\nconst createHybrid4 = (word1, word2) => {\n  if (word1.length < 4 || word2.length < 4) {\n    return null;\n  }\n\n  const intersection = word1.slice(-4);\n  if (word2.slice(0, 4) === intersection) {\n    return word1.slice(0, -4) + intersection.toUpperCase() + word2.slice(4);\n  }\n\n  return null;\n};\n\nconst createSharada = (word1, word2, dictionarySet) => {\n  const word = word1 + word2;\n  if (dictionarySet.has(word)) {\n    return word;\n  }\n\n  return null;\n};\n\nconst createGolovahvosts = (word1, word2, dictionarySet) => {\n  if (word1.length < 3 || word2.length < 3) {\n    return [];\n  }\n\n  const golovahvosts = [];\n  for (let i = word1.length; i >= 3; i--) {\n    const word1Tail = word1.slice(-i);\n\n    for (let j = word2.length; j >= 3; j--) {\n      const word = word1Tail + word2.slice(0, j);\n      if (dictionarySet.has(word)) {\n        golovahvosts.push(\n          word1.slice(0, word1.length - i) + word.toUpperCase() + word2.slice(j - word2.length),\n        );\n      }\n    }\n  }\n\n  return golovahvosts;\n};\n\nconst getFormats = (words, dictionarySet, selectedFormatsSet) => {\n  const formats = FORMATS_MAP.reduce((result, [format]) => {\n    if (selectedFormatsSet.has(format)) {\n      return {\n        ...result,\n        [format]: [],\n      };\n    }\n\n    return result;\n  }, {});\n\n  words.forEach((row1, i) => {\n    words.forEach((row2, j) => {\n      if (j === i) {\n        return;\n      }\n\n      row1.forEach((word1) => {\n        if (word1.length <= 1 || !/^[а-я]+$/.test(word1)) {\n          return;\n        }\n\n        row2.forEach((word2) => {\n          if (word2.length <= 1 || !/^[а-я]+$/.test(word2) || word2 === word1) {\n            return;\n          }\n\n          const word = `${word1} ${word2}`;\n\n          if (j > i) {\n            if (formats.anagrams && !formats.anagrams.includes(word) && isAnagram(word1, word2)) {\n              formats.anagrams.push(word);\n            }\n\n            if (\n              formats.metagrams &&\n              !formats.metagrams.includes(word) &&\n              isMetagram(word1, word2)\n            ) {\n              formats.metagrams.push(word);\n            }\n\n            if (\n              formats.metanagrams &&\n              !formats.metanagrams.includes(word) &&\n              isMetanagram(word1, word2)\n            ) {\n              formats.metanagrams.push(word);\n            }\n          }\n\n          if (\n            formats.plusograms &&\n            !formats.plusograms.includes(word) &&\n            isPlusogram(word1, word2)\n          ) {\n            formats.plusograms.push(word);\n          }\n\n          if (\n            formats.tlenograms &&\n            !formats.tlenograms.includes(word) &&\n            isTlenogram(word1, word2)\n          ) {\n            formats.tlenograms.push(word);\n          }\n\n          if (formats.logogrifs && !formats.logogrifs.includes(word) && isLogogrif(word1, word2)) {\n            formats.logogrifs.push(word);\n          }\n\n          if (\n            formats.logogrifs2 &&\n            !formats.logogrifs2.includes(word) &&\n            isLogogrif2(word1, word2)\n          ) {\n            formats.logogrifs2.push(word);\n          }\n\n          if (formats.metagrifs && !formats.metagrifs.includes(word) && isMetagrif(word1, word2)) {\n            formats.metagrifs.push(word);\n          }\n\n          if (formats.brukvas && !formats.brukvas.includes(word) && isBrukva(word1, word2)) {\n            formats.brukvas.push(word);\n          }\n\n          if (formats.tikvas && !formats.tikvas.includes(word) && isTikva(word1, word2)) {\n            formats.tikvas.push(word);\n          }\n\n          if (formats.hybrids3) {\n            const hybrid3 = createHybrid3(word1, word2);\n            if (hybrid3 && !formats.hybrids3.includes(hybrid3)) {\n              formats.hybrids3.push(hybrid3);\n            }\n          }\n\n          if (formats.hybrids4) {\n            const hybrid4 = createHybrid4(word1, word2);\n            if (hybrid4 && !formats.hybrids4.includes(hybrid4)) {\n              formats.hybrids4.push(hybrid4);\n            }\n          }\n\n          if (formats.sharadas) {\n            const sharada = createSharada(word1, word2, dictionarySet);\n            if (sharada && !formats.sharadas.includes(sharada)) {\n              formats.sharadas.push(sharada);\n            }\n          }\n\n          if (formats.golovahvosts) {\n            const golovahvosts = createGolovahvosts(word1, word2, dictionarySet);\n            golovahvosts.forEach((golovahvost) => {\n              if (!formats.golovahvosts.includes(golovahvost)) {\n                formats.golovahvosts.push(golovahvost);\n              }\n            });\n          }\n        });\n      });\n    });\n  });\n\n  return formats;\n};\n\nconst App = () => {\n  const [database, setDatabase] = useState(null);\n\n  const [selectedFormatsSet, setSelectedFormatsSet] = useState(\n    new Set(FORMATS_MAP.map(([format]) => format)),\n  );\n\n  const [selectedDictionary, handleSelectedDictionaryChange, setSelectedDictionary] = useField(\n    'sanstv',\n  );\n\n  const [words, handleWordsChange] = useField('');\n  const [wordsDebounced] = useDebounce(words, 500);\n\n  const wordsClean = useMemo(\n    () =>\n      wordsDebounced\n        .trim()\n        .toLowerCase()\n        .replaceAll('ё', 'е')\n        .replaceAll('/', ' ')\n        .replaceAll('\\\\', ' ')\n        .split(/\\t+|\\n+/)\n        .map((row) => row.split(/\\s+/)),\n    [wordsDebounced],\n  );\n\n  const formats = useMemo(() => {\n    if (!database) {\n      return {};\n    }\n\n    return getFormats(wordsClean, database[selectedDictionary].set, selectedFormatsSet);\n  }, [database, selectedFormatsSet, selectedDictionary, wordsClean]);\n\n  const handleSelectedFormatChange = useCallback(\n    (_, { value }) => {\n      if (selectedFormatsSet.has(value)) {\n        setSelectedFormatsSet(\n          new Set([...selectedFormatsSet].filter((format) => format !== value)),\n        );\n      } else {\n        setSelectedFormatsSet(new Set([...selectedFormatsSet, value]));\n      }\n    },\n    [selectedFormatsSet],\n  );\n\n  useEffect(() => {\n    (async () => {\n      const { sanstv, sociation } = await import('./database.json');\n\n      setDatabase({\n        sanstv: {\n          array: sanstv,\n          set: new Set(sanstv),\n        },\n        sociation: {\n          array: sociation,\n          set: new Set(sociation),\n        },\n      });\n    })();\n  }, []);\n\n  useHotkeys(\n    'alt+space',\n    () => {\n      setSelectedDictionary(\n        DICTIONARIES_MAP.find(([dictionary]) => dictionary !== selectedDictionary)[0],\n      );\n    },\n    [selectedDictionary],\n  );\n\n  if (!database) {\n    return <Loader active>Загружаю базу...</Loader>;\n  }\n\n  return (\n    <>\n      <div className={styles.header}>\n        <Container>\n          <Grid padded>\n            <Grid.Row>\n              <Grid.Column width={15}>\n                <Form>\n                  <TextArea\n                    autoFocus\n                    value={words}\n                    placeholder=\"Слова\"\n                    onChange={handleWordsChange}\n                  />\n                </Form>\n              </Grid.Column>\n              <Grid.Column>\n                <Modal size=\"mini\" trigger={<Button size=\"big\" icon=\"setting\" />}>\n                  <Header icon=\"setting\" content=\"Настройки\" />\n                  <Modal.Content>\n                    <Form>\n                      <Form.Group grouped>\n                        <label>Форматы</label>\n                        {FORMATS_MAP.map(([format, formatLabel]) => (\n                          <Form.Checkbox\n                            key={format}\n                            value={format}\n                            label={formatLabel}\n                            checked={selectedFormatsSet.has(format)}\n                            onChange={handleSelectedFormatChange}\n                          />\n                        ))}\n                      </Form.Group>\n                      <Form.Group grouped>\n                        <label>Словарь</label>\n                        {DICTIONARIES_MAP.map(([dictionary, dictionaryLabel]) => (\n                          <Form.Radio\n                            key={dictionary}\n                            value={dictionary}\n                            label={dictionaryLabel}\n                            checked={dictionary === selectedDictionary}\n                            onChange={handleSelectedDictionaryChange}\n                          />\n                        ))}\n                      </Form.Group>\n                    </Form>\n                  </Modal.Content>\n                </Modal>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </div>\n      <div className={styles.content}>\n        <Container>\n          <Grid padded>\n            {FORMATS_MAP.filter(([format]) => formats[format] && formats[format].length > 0).map(\n              ([format, formatLabel]) => (\n                <Grid.Row key={format}>\n                  <Grid.Column>\n                    <Divider horizontal>\n                      <Header as=\"h4\" className={styles.title}>\n                        {formatLabel}\n                      </Header>\n                    </Divider>\n                    <div className={styles.words}>\n                      {formats[format].map((word, i) => (\n                        <Label\n                          horizontal\n                          key={word}\n                          className={classNames(styles.word, i % 2 && styles.odd)}\n                        >\n                          {word}\n                        </Label>\n                      ))}\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              ),\n            )}\n          </Grid>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default withAuth(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__3ZZ1n\",\"content\":\"App_content__3La4L\",\"title\":\"App_title__-GfWs\",\"words\":\"App_words__1Oqw2\",\"word\":\"App_word__3aQvw\",\"odd\":\"App_odd__2GTiD\"};"],"sourceRoot":""}